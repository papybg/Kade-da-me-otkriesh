document.addEventListener('DOMContentLoaded', () => {
    // --- –û–ë–©–ò –ï–õ–ï–ú–ï–ù–¢–ò ---
    const bodyEl = document.body;
    const bravoAudio = document.getElementById('bravoAudio');
    const opitaiPakAudio = document.getElementById('opitaiPakAudio');

    // --- –ï–õ–ï–ú–ï–ù–¢–ò –ù–ê –°–¢–ê–†–¢–û–í –ï–ö–†–ê–ù ---
    const startScreenEl = document.getElementById('startScreen');
    const portalContainerEl = document.getElementById('portalContainer');
    const soundBtn = document.getElementById('soundBtn');

    // --- –ï–õ–ï–ú–ï–ù–¢–ò –ù–ê –ï–ö–†–ê–ù –ó–ê –ò–ì–†–ê ---
    const gameScreenEl = document.getElementById('gameScreen');
    const dropZoneEl = document.getElementById('dropZone');
    const choiceZoneEl = document.getElementById('choiceZone');
    const gameMessageEl = document.getElementById('gameMessage');
    const gameTitleEl = document.getElementById('gameTitle');
    const winScreenEl = document.getElementById('winScreen');
    const playAgainBtn = document.getElementById('playAgainBtn'); // –ë—É—Ç–æ–Ω "–ù–æ–≤–∞ –∏–≥—Ä–∞"
    const startTurnBtn = document.getElementById('startTurnBtn');
    const backToMenuBtn = document.getElementById('backToMenuBtn'); // –ë—É—Ç–æ–Ω "–ü–æ—Ä—Ç–∞–ª–∏" / –ú–µ–Ω—é

    // --- –°–™–°–¢–û–Ø–ù–ò–ï –ù–ê –ò–ì–†–ê–¢–ê ---
    let allItems = [];
    let currentPortalData = {};
    let currentLayoutId = null; // –ü–∞–∑–∏–º ID-—Ç–æ –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ –ø–æ–¥—Ä–µ–¥–±–∞
    let isTurnActive = false;
    let isMuted = false;

    // --- –û–°–ù–û–í–ù–ê –õ–û–ì–ò–ö–ê ---

    async function initializeApp() {
        try {
            const themesResponse = await fetch('themes.json');
            allItems = (await themesResponse.json()).allItems;
            
            const portalsResponse = await fetch('portals.json');
            const portals = (await portalsResponse.json()).portals;

            renderPortals(portals);
            showStartScreen();

        } catch (error) {
            console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ:", error);
            document.body.innerHTML = `<h1 style="color:red">–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ!</h1>`;
        }
    }

    function renderPortals(portals) {
        portalContainerEl.innerHTML = '';
        portals.forEach(portal => {
            const portalEl = document.createElement('div');
            portalEl.className = 'portal';
            portalEl.innerHTML = `
                <img src="${portal.icon}" alt="${portal.name}">
                <div class="portal-name">${portal.name}</div>
            `;
            portalEl.addEventListener('click', () => startGame(portal));
            portalContainerEl.appendChild(portalEl);
        });
    }

    function startGame(portal) {
        currentPortalData = portal;
        showGameScreen();
        // –ó–∞—Ä–µ–∂–¥–∞–º–µ —Å–ª—É—á–∞–π–Ω–∞ –ø–æ–¥—Ä–µ–¥–±–∞ –ø—Ä–∏ –ø—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
        loadNextLayout();
    }

    async function loadLayout(layoutId) {
        try {
            const response = await fetch(`assets/layouts/${layoutId}.json`);
            const levelData = await response.json();
            currentLayoutId = layoutId; // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ç–µ–∫—É—â–æ—Ç–æ ID
            
            isTurnActive = false;
            winScreenEl.classList.add('hidden');
            startTurnBtn.classList.remove('hidden');
            gameMessageEl.textContent = '–ù–∞—Ç–∏—Å–Ω–∏ "–°–¢–ê–†–¢", –∑–∞ –¥–∞ —Å–≤–µ—Ç–Ω–µ –∫—Ä—ä–≥—á–µ!';
            bodyEl.style.backgroundImage = `url('${currentPortalData.background}')`;
            gameTitleEl.textContent = currentPortalData.name;
            dropZoneEl.innerHTML = '<div id="slotHighlighter" class="hidden"></div>'; 
            
            const availableSlots = [...levelData.slots];
            const choicePool = generateChoicePool(levelData);
            
            renderChoiceZone(choicePool);
            setupGameTurn(availableSlots);

        } catch(error) {
            console.error(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ–¥—Ä–µ–¥–±–∞ ${layoutId}.json:`, error);
        }
    }

    function generateChoicePool(levelData) {
        const correctItemsForLevel = new Set();
        levelData.slots.forEach(slot => {
            const itemsForSlot = allItems.filter(item => slot.index.includes(item.index));
            if (itemsForSlot.length > 0) {
                 const availableItems = itemsForSlot.filter(item => ![...correctItemsForLevel].includes(item));
                const itemToPush = availableItems.length > 0 ? availableItems[Math.floor(Math.random() * availableItems.length)] : itemsForSlot[0];
                 correctItemsForLevel.add(itemToPush);
            }
        });

        const correctItemsArray = Array.from(correctItemsForLevel);
        const distractorItems = allItems.filter(item => 
            !correctItemsArray.some(correct => correct.id === item.id)
        );
        const finalDistractors = shuffleArray(distractorItems).slice(0, levelData.distractors);
        return shuffleArray([...correctItemsArray, ...finalDistractors]);
    }
    
    function renderChoiceZone(choicePool) {
        choiceZoneEl.innerHTML = '';
        choicePool.forEach(item => {
            const img = document.createElement('img');
            img.src = item.image;
            img.alt = item.name;
            img.dataset.index = item.index;
            img.addEventListener('click', () => handleChoiceClick(item, img));
            choiceZoneEl.appendChild(img);
        });
    }

    function setupGameTurn(slots) {
        let availableSlots = [...slots];
        let activeSlotData = null;

        function startNewTurn() {
            if (isTurnActive) return;
            isTurnActive = true;
            startTurnBtn.classList.add('hidden');
            activateNextSlot();
        }

        function activateNextSlot() {
            if (availableSlots.length > 0) {
                const randomIndex = Math.floor(Math.random() * availableSlots.length);
                activeSlotData = availableSlots[randomIndex];
                
                const highlighter = document.getElementById('slotHighlighter');
                highlighter.style.top = activeSlotData.position.top;
                highlighter.style.left = activeSlotData.position.left;
                highlighter.style.width = activeSlotData.diameter;
                highlighter.style.height = activeSlotData.diameter;
                
                highlighter.classList.remove('hidden', 'active');
                void highlighter.offsetWidth;
                highlighter.classList.add('active');

                gameMessageEl.textContent = '–ö–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –µ –∑–∞ —Ç—É–∫?';
            }
        }

        window.handleChoiceClick = (chosenItem, chosenImgElement) => {
            if (!isTurnActive || chosenImgElement.classList.contains('used')) return;

            if (activeSlotData.index.includes(chosenItem.index)) {
                isTurnActive = false;
                if (!isMuted) bravoAudio.play();
                
                const placedImg = document.createElement('img');
                placedImg.src = chosenItem.image;
                placedImg.className = 'placed-image';
                placedImg.style.top = activeSlotData.position.top;
                placedImg.style.left = activeSlotData.position.left;
                placedImg.style.width = activeSlotData.diameter;
                placedImg.style.height = activeSlotData.diameter;
                dropZoneEl.appendChild(placedImg);

                document.getElementById('slotHighlighter').classList.add('hidden');
                chosenImgElement.classList.add('used');
                
                availableSlots = availableSlots.filter(slot => slot !== activeSlotData);
                
                if (availableSlots.length === 0) {
                    setTimeout(() => winScreenEl.classList.remove('hidden'), 1000);
                } else {
                    startTurnBtn.classList.remove('hidden');
                    gameMessageEl.textContent = '–ù–∞—Ç–∏—Å–Ω–∏ "–°–¢–ê–†–¢" –∑–∞ —Å–ª–µ–¥–≤–∞—â–∏—è –∫—Ä—ä–≥!';
                }
            } else {
                if (!isMuted) opitaiPakAudio.play();
                gameMessageEl.textContent = '–û–ø–∏—Ç–∞–π –ø–∞–∫!';
            }
        };
        startTurnBtn.onclick = startNewTurn;
    }

    function loadNextLayout() {
        const layouts = currentPortalData.layouts;
        if (layouts.length <= 1) {
            loadLayout(layouts[0]); // –ê–∫–æ –∏–º–∞ —Å–∞–º–æ 1, –∑–∞—Ä–µ–∂–¥–∞–º–µ –ø–∞–∫ –Ω–µ–≥–æ
            return;
        }

        // –ò–∑–±–∏—Ä–∞–º–µ –Ω–æ–≤–∞ –ø–æ–¥—Ä–µ–¥–±–∞, —Ä–∞–∑–ª–∏—á–Ω–∞ –æ—Ç —Ç–µ–∫—É—â–∞—Ç–∞
        let nextLayoutId;
        do {
            nextLayoutId = layouts[Math.floor(Math.random() * layouts.length)];
        } while (nextLayoutId === currentLayoutId);
        
        loadLayout(nextLayoutId);
    }
    
    function showStartScreen() {
        bodyEl.style.backgroundImage = 'none';
        bodyEl.style.backgroundColor = '#2c3e50';
        gameScreenEl.classList.remove('visible');
        gameScreenEl.classList.add('hidden');
        startScreenEl.classList.remove('hidden');
    }

    function showGameScreen() {
        startScreenEl.classList.add('hidden');
        gameScreenEl.classList.remove('hidden');
        gameScreenEl.classList.add('visible');
    }

    function toggleMute() {
        isMuted = !isMuted;
        soundBtn.textContent = isMuted ? 'üîá' : 'üîä';
    }

    // --- Event Listeners ---
    playAgainBtn.addEventListener('click', loadNextLayout);
    backToMenuBtn.addEventListener('click', showStartScreen);
    soundBtn.addEventListener('click', toggleMute);

    // --- –°—Ç–∞—Ä—Ç –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ ---
    initializeApp();
    
    // --- Helper —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–∞–∑–±—ä—Ä–∫–≤–∞–Ω–µ ---
    function shuffleArray(array) {
        let currentIndex = array.length, randomIndex;
        while (currentIndex != 0) {
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex--;
            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
        }
        return array;
    }
});
